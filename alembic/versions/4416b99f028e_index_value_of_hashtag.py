"""index value of hashtag

Revision ID: 4416b99f028e
Revises: cc6fe4e9ef45
Create Date: 2025-01-08 15:25:26.573342

"""

from collections.abc import Sequence

from sqlalchemy import inspect

from alembic import op


# revision identifiers, used by Alembic.
revision: str = "4416b99f028e"
down_revision: str | None = "cc6fe4e9ef45"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = inspect(conn)

    # Check existing indexes and constraints
    hashtags_indexes = {idx["name"] for idx in inspector.get_indexes("hashtags")}
    post_hashtags_constraints = {
        uc["name"] for uc in inspector.get_unique_constraints("post_hashtags")
    }

    # Get primary key constraint name
    pk_constraint = inspector.get_pk_constraint("post_hashtags")
    if pk_constraint and pk_constraint.get("name"):
        post_hashtags_constraints.add(pk_constraint["name"])

    # Create index on hashtags.value only if it doesn't exist
    # Note: The unique constraint "uq_hashtags_value" from cc6fe4e9ef45 already creates an index,
    # but we add an explicit index here for clarity and potential performance tuning
    with op.batch_alter_table("hashtags", schema=None) as batch_op:
        if "ix_hashtags_value" not in hashtags_indexes:
            batch_op.create_index("ix_hashtags_value", ["value"], unique=True)

    # The primary key constraint "pk_post_hashtags" already ensures uniqueness,
    # so we only create it if it doesn't exist (which it should from cc6fe4e9ef45)
    # This is likely redundant but kept for migration history compatibility
    if "pk_post_hashtags" not in post_hashtags_constraints:
        with op.batch_alter_table("post_hashtags", schema=None) as batch_op:
            batch_op.create_unique_constraint(
                "pk_post_hashtags", ["postId", "hashtagId"]
            )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Remove unique constraint from post_hashtags
    with op.batch_alter_table("post_hashtags", schema=None) as batch_op:
        batch_op.drop_constraint("pk_post_hashtags", type_="unique")

    # Remove index from hashtags.value
    with op.batch_alter_table("hashtags", schema=None) as batch_op:
        batch_op.drop_index("ix_hashtags_value")
    # ### end Alembic commands ###
