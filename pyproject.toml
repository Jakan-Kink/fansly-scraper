[project]
name = "fansly-scraper"
version = "0.11.0"
description = "Easy-to-use fansly.com content scraping tool. Enjoy your Fansly content offline anytime, anywhere in the highest possible content resolution! Fully customizable to download in bulk or single: photos, videos & audio from the timeline, messages, collection & single posts."
authors = [
    {name ="prof79"},
    {name ="Avnsx"},
    {name ="pawnstar81"},
    {name ="UpAndDown666"},
    {name ="icewinterberry12"},
    {name ="1gintonic"},
    {name ="Jakan", email ="github@jakan.co"},
]
credits = [
    "Avnsx",
    "KasumiDev",
    "FletcherD",
    "XelaRellum",
    "sunbart",
]
license = "GPL-3.0-only"
readme = "README.md"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry.dependencies]
python = ">=3.12,<3.14"
imagehash = "4.3.1"
loguru = ">=0.7.2"
m3u8 = ">=4.0.0"
pillow = ">=10.2"
plyvel-ci = ">=1.5"
psutil = ">=5.9.8"
python-dateutil = ">=2.8.2,<3.0.0"
rich = ">=13.7.0,<14.0.0"
strenum = ">=0.4.15,<0.5.0"
websockets = ">=12.0,<13.0"
alembic = ">=1.14.0"
aiosqlite = ">=0.20.0"
greenlet = ">=3.1.1"
aiomultiprocess = ">=0.9.1"
toml = ">=0.10.2"
sqlalchemy = {extras = ["asyncio"], version = ">=2.0.37"}
httpx = {extras = ["http2"], version = "^0.28.1"}
strawberry-graphql = ">=0.258.0"
gql = {extras = ["httpx", "websockets"], version = ">=3.5.0"}
websocket-client = ">=1.8.0"
psycopg2-binary = ">=2.9.10,<3.0.0"
asyncpg = ">=0.30.0,<0.31.0"
psycopg = {version = ">=3.2.10,<4.0.0", extras = ["binary", "pool"]}
httpx-retries = "^0.4.3"
ffmpeg-python = "^0.2.0"
jsbeautifier = "^1.15.4"
javascript = "^1!1.2.6"


[tool.poetry.group.dev.dependencies]
pyinstaller = ">=6.11.1"
types-python-dateutil = ">=2.9.0.20241206"
types-requests = ">=2.32.0.20241016"
types-setuptools = ">=75.6.0.20241126"
types-pillow = ">=10.2.0"
memory-profiler = ">=0.61.0"
pylint = ">=3.3.3"
pre-commit = ">=4.0.1"
bandit = {extras = ["toml"], version = ">=1.8.0"}
mypy = ">=1.11.0"
ruff = ">=0.14.2"

[tool.poetry.group.test.dependencies]
pytest = ">=8.3"
pytest-cov = ">=6.0.0"
pytest-asyncio = ">=0.26.0"
pytest-timeout = ">=2.3.1"
pytest-randomly = ">=3.16.0"
pytest-mock = ">=3.14.0"
pytest-xdist = ">=3.6.1"
coverage = {extras = ["toml"], version = ">=7.8"}
psutil = ">=7.0.0"
types-psutil = ">=7.0.0.20250401"
types-tqdm = ">=4.67.0.20241221"
radon = ">=6.0.1"
pytest-loguru = ">=0.4.0"
factory-boy = "^3.3.3"


[tool.bandit]
# Exclude test files
exclude_dirs = ["tests"]
# Skip specific checks
skips = [
    'B110',  # try-except-pass
    'B113',  # request-without-timeout
    'B311',  # random
    'B404',  # import-subprocess
    'B601',  # paramiko
    'B602',  # subprocess-popen-with-shell-equals-true
    'B603',  # subprocess-without-shell-equals-true
    'B605',  # start-process-with-partial-path
    'B606',  # start-process-with-no-shell
    'B607',  # start-process-with-partial-path
    'B608',  # hardcoded-sql-expressions
]

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
# Enable flake8 rules (F, E, W), isort (I), pyupgrade (UP), and more
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C90",    # mccabe complexity
    "N",      # pep8-naming
    "ANN",    # flake8-annotations
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit
    "BLE",    # flake8-blind-except
    "A",      # flake8-builtins
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PL",     # pylint
    "TRY",    # tryceratops
    "NPY",    # numpy-specific rules
    "PERF",   # perflint
    "RUF",    # ruff-specific rules
]

ignore = [
    "E501",    # line too long (handled by formatter)
    "ANN401",  # dynamically typed expressions (Any)
    "S603",    # subprocess without shell
    "S608",    # hardcoded SQL expressions
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value comparison
    "TRY003",  # avoid specifying long messages outside exception class
    "EM101",   # exception must not use string literal
    "EM102",   # exception must not use f-string literal
    "G004",    # logging statement uses f-string
    "RET504",  # unnecessary variable assignment before return
    "A002",    # argument shadowing builtin
    "A003",    # class attribute shadowing builtin
    "BLE001",  # blind except Exception
    "B904",    # raise without from inside except
    "N818",    # exception name should end with Error
    "T201",    # print statements (used intentionally in CLI tool)
    "ERA001",  # commented-out code (keep for now during development)
    "SLF001",  # private member access (sometimes necessary)
]

[tool.ruff.lint.mccabe]
max-complexity = 14

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "F841",    # local variable assigned but never used
    "F811",    # redefinition of unused name
    "ARG001",  # unused function argument
    "ARG002",  # unused method argument
    "PLR0913", # too many arguments
    "S101",    # use of assert
    "S105",    # test fixtures use hardcoded test values
    "ANN001",  # missing type annotation for function argument
    "ANN003",  # missing type annotations for **kwargs in test helpers
    "ANN201",  # missing return type annotation
    "ANN202",  # missing return type annotation for private function
    "ANN204",  # missing return type annotation for special method
    "E721",    # type comparisons with == (checking type annotations in tests)
    "D",       # pydocstyle
]
"alembic/**/*.py" = [
    "INP001",  # implicit namespace package
    "ANN001",  # missing type annotation for function argument
    "ANN201",  # missing return type annotation
]
"textio/logging.py" = [
    "N803",    # argument names match upstream logging.handlers API (maxBytes, backupCount)
]
"stash/types/*.py" = [
    "N815",    # mixedCase variable names match upstream Stash GraphQL schema
]
"stash/processing/*.py" = [
    "N815",    # mixedCase variable names match Fansly API response format
]
"stash/old_processing.py" = [
    "N815",    # mixedCase variable names match Fansly API response format
]
"metadata/*.py" = [
    "N815",     # mixedCase variable names match Fansly API response format
    "PLC0415",  # imports inside functions to avoid circular dependencies
]
"tests/fixtures/*.py" = [
    "N815",    # test factories mirror metadata models with camelCase fields
]
"tests/fixtures/__init__.py" = [
    "F401",    # intentional re-exports for fixture module
]
"api/websocket_example.py" = [
    "S105",    # example code with placeholder credentials
]
"stash/**/*.py" = [
    "TID252",   # relative imports are standard in this package structure
    "PLC0415",  # imports inside functions to avoid circular dependencies
]
"tests/stash/**/*.py" = [
    "TID252",   # relative imports for test fixtures
]
"config/*.py" = [
    "PLC0415",  # imports inside functions to avoid circular dependencies
]
"download/*.py" = [
    "PLC0415",  # imports inside functions to avoid circular dependencies
]
"api/*.py" = [
    "PLC0415",  # conditional imports and circular import avoidance
]
"helpers/*.py" = [
    "PLC0415",  # conditional imports and circular import avoidance
]
"fileio/*.py" = [
    "PLC0415",  # imports inside functions to avoid circular dependencies
]
"scripts/*.py" = [
    "PLC0415",  # script-specific lazy imports
]
"fansly_downloader_ng.py" = [
    "PLC0415",  # lazy imports for optional dependencies and circular imports
]
"**/conftest.py" = ["F401", "F811"]

[tool.ruff.lint.isort]
known-first-party = ["config", "api", "download", "metadata", "stash", "fileio", "pathio", "textio", "helpers", "errors"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-config=pyproject.toml",
    "--randomly-seed=1234",
    "--timeout=300",
    "-n=8",  # Use 8 parallel workers
    "-v",  # Add verbose output for better debugging
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
xfail_strict = true
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    "ignore::sqlalchemy.exc.SAWarning",
    "ignore::coverage.exceptions.CoverageWarning",
    "ignore::pluggy.PluggyTeardownRaisedWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "functional: marks tests as functional tests",
    "performance: marks tests as performance tests",
    "asyncio: mark a test as an async test",
    "full_workflow: marks tests that run the complete workflow",
    "comprehensive: marks tests that check for comprehensive coverage",
]

[tool.coverage.run]
branch = true
source = ["."]
data_file = ".coverage"
omit = [
    "*/venv/*",
    "*/venv_test/*",
    "*/__pycache__/*",
    "*/tests/*",
    "docs/*",
    "*/migrations/*",
    "*/.pytest_cache/*",
    "*/.git/*",
    "*/.github/*",
    "*/htmlcov/*",
    "stash/example.py"  # Example code, not production code
]
command_line = "-m pytest discover -s tests/"
parallel = false
concurrency = ["multiprocessing"]
disable_warnings = [
    "no-data-collected",
    "module-not-imported",
    "couldnt-parse",
]
# Fix for Mock serialization issues in parallel mode
sigterm = true

[tool.coverage.report]
exclude_also = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "pass",
    "\\.\\.\\.$",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if TESTING:"
]
ignore_errors = true
skip_empty = true
skip_covered = true
precision = 2
show_missing = true
fail_under = 70

[tool.coverage.html]
directory = "htmlcov"
title = "Coverage Report"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"
package_depth = 2

[tool.mypy]
python_version = "3.12"
exclude = [
    "tests/",
    "venv_test/",]
strict = true
# Start off with these
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true

# Getting these passing should be easy
strict_equality = true
strict_concatenate = true

# Strongly recommend enabling this one as soon as you can
check_untyped_defs = true

# These shouldn't be too much additional work, but may be tricky to
# get passing if you use a lot of untyped libraries
disallow_subclassing_any = true
disallow_untyped_decorators = true
disallow_any_generics = true

# These next few are various gradations of forcing use of type annotations
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_defs = true

# This one isn't too hard to get passing, but return on investment is lower
no_implicit_reexport = true

# This one can be tricky to get passing if you use a lot of untyped libraries
warn_return_any = true
